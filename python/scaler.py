# -*- coding: utf-8 -*-
"""
Created on Wed Dec 30 04:00:46 2020

@author: ncm
"""

from sklearn.preprocessing import MinMaxScaler
import numpy as np

import pandas as pd


#df=pd.read_csv("F:\paper2\dataset\ChestXray-NIHCC\Data_Entry_2017.csv",encoding='utf-8')
#df=df.iloc[0:4999,:]


#print(df.head())
data = np.array([36143498,93.4905481,87.9656452,79.74739251,68.64077366,87.43958586,113.6436275,91.12590525,100.1657888,109.0646134,94.29092119,96.19234135,108.3947998,131.3855109,90.77985671,88.49792517,95.18812538,91.43950442,100.1657888,109.0646134,94.29092119,96.19234135,108.3947998,131.3855109,90.77985671,88.49792517,95.18812538,91.43950442,110.2629821,108.0714196,95.6006742,98.78492812,100.0638308,88.33046465,155.3784768,101.1661159,118.4363618,107.4650981,70.64333965,58.01663576,66.41037542,83.39319725,81.43164706,82.62446955,86.63710999,95.3746346,77.27574938,84.27763525,53.66366727,80.00329533,80.24504616,73.45583299,81.2892219,69.03663894,82.61319794,80.94423878,64.54824749,82.40173055,83.43067353,81.81051166,167.568328,109.9288031,91.50502248,0.561084770262746,1.7111111112481,0.327906683893535,24,0,1]).reshape(-1, 1)

scaler = MinMaxScaler(copy=True, feature_range=(0, 1))
scaler.fit(data)
#print(scaler.mean_)
newdata = scaler.transform(data)
#print(type(newdata))
#print(newdata)
b = newdata.flatten()
rvalues=list(b)
#print(c)
#np.savetxt("foo.csv", newdata, delimiter=",")
import matplotlib.pyplot as plt
# show plots in notebook


result = []
lambdas = []
maps = []
#rvalues=[]
# define range of r 
#rvalues = np.arange(0, 2, 0.01)
#rvalues = [0.5529712259936865, 0.6483424999205807, 0.936480028685801, 0.043643250696852265, 0.8637850066068038, 0.7377817832127589, 0.9634076285024669, 0.7194917304317963, 0.5712590071434505, 0.5892863842914438, 0.36412560344510747, 0.5756833831439316, 0.47480785277121007, 0.6500886052804107, 0.5529712259936865, 0.6483424999205807, 0.936480028685801, 0.043643250696852265, 0.8637850066068038, 0.7377817832127589, 0.5712590071434505, 0.5892863842914438, 0.36412560344510747, 0.5756833831439316, 0.7112821185621512, 0.7711024929758661, 0.5419485142068494, 0.5223572453257128, 0.6500886052804107, 0.5093279759514833, 0.6046992492237286, 0.8928367779889486, 0.0, 0.8201417559099513, 0.6723169071674804, 0.5790996393322418, 0.47833214455337614, 0.6739550522180615, 0.671644519607782, 0.6567837156108618, 0.8953389873919637, 0.6260892493692503, 0.6836728264447383, 0.7151465887529549, 0.9634076285024669, 0.7194917304317963, 0.8445701206111369, 0.5876953652229651, 0.37211993450631087, 0.7436411012885771, 0.6550744800692201, 0.8279256475085119, 0.4959056458599622, 0.7197341774180674, 0.9583587263131632, 0.8445701206111369, 0.5876953652229651, 0.47833214455337614, 0.6739550522180615, 0.671644519607782, 0.6567837156108618, 0.8953389873919637, 0.6260892493692503, 0.6836728264447383, 0.7151465887529549, 0.9634076285024669, 0.7194917304317963, 0.6550744800692201, 0.4750534931341346, 0.8889361450006172, 0.5552689733136746, 1.0000000000000002, 0.7956418773781742, 0.7646794699453971, 0.6778657471578413]
#print(rvalues)


# loop through r
for r in rvalues:
    x = 0.1
    result = []
    # iterate system 100 times
    for t in range(100):
        x = x + r - x**2
        # calculate log of the absolute of the derivative
        result.append(np.log(abs(1 - 2*x)))
    # take average
    lambdas.append(np.mean(result))
    # for the map ignore first 100 iterations as transient time and iterate anew
    for t in range(20):
        x = x + r - x**2
        maps.append(x)    
print(maps)    

