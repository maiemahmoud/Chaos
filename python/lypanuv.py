# -*- coding: utf-8 -*-
"""
Created on Wed Dec 30 01:59:46 2020

@author: ncm
"""

import numpy as np
import matplotlib.pyplot as plt
# show plots in notebook


result = []
lambdas = []
maps = []
rvalues=[]
# define range of r 
#rvalues = np.arange(0, 2, 0.01)
rvalues = [0.0, 0.7902011414116273, 0.4179152148923838, 0.6613404539127931,
           0.8377146173347766, 0.6098097898233555, 0.7424535164761105, 
           0.7408868407751975, 0.745606683127252, 0.8925647203891652, 
           0.7099977139073476, 0.7490427334731603, 0.7703837777004593,
           0.9387192241375825, 0.7733300368681416, 0.6728196157544987,
           0.68504322757599, 0.5323711022914838, 0.6758196004077418, 
           0.7677634418013256, 0.8083251402584367, 0.6529453947659015,
           0.9002818692581681, 0.607420114701056, 0.7262706752047979,
           0.6007519128063216, 0.6252190742122575, 0.6396613726590196, 
           0.9195668475869557, 0.6604194352948688, 0.7250867140582168,
           0.920460742898673, 0.31506539866787187, 0.8711692833616814,
           0.7709354249492965, 0.707728687345497, 0.7135641717352147,
           0.6978700474283438, 0.6379401744124277, 0.7632395428498876, 
           0.8616508821653707, 0.6365219805062335, 0.7882907631682882, 
           0.9500921074696026, 0.872936804488374, 0.6987607570895403,
           0.5525880575504679, 0.8045010501579061, 0.7444477218651114, 
           0.6223830062965913, 0.9030195533956485, 0.6767737745009595, 
           0.978327316680668, 0.8397606054507997, 0.81876628961605, 
           0.7107139821992182, 0.862061240708872, 0.6676401830197506, 
           0.8217596159193891, 0.7303867635412976, 0.7443863821865263,
           0.697595571010056, 0.6991227626960365, 0.6359370046650056, 
           0.8706302544257295, 0.6567671668728853, 0.7749305073939022,
           0.8031644441203193, 0.5817911822093199, 0.6834552510739164,
           0.7599015285683367, 0.9999999999999999, 0.6006890335692755, 
           0.8149412777039661]
print(rvalues)


# loop through r
for r in rvalues:
    x = 0.1
    result = []
    # iterate system 100 times
    for t in range(100):
        x = x + r - x**2
        # calculate log of the absolute of the derivative
        result.append(np.log(abs(1 - 2*x)))
    # take average
    lambdas.append(np.mean(result))
    # for the map ignore first 100 iterations as transient time and iterate anew
    for t in range(20):
        x = x + r - x**2
        maps.append(x)    
print(maps)    
fig = plt.figure(figsize=(10,7))
ax1 = fig.add_subplot(1,1,1)
#
xticks = np.linspace(0, 1, 1480)
## zero line
zero = [0]*1480
ax1.plot(xticks, zero, 'g-')
## plot map
ax1.plot(xticks, maps, 'r.',alpha = 0.3, label = 'Map')
ax1.set_xlabel('r')
## plot lyapunov
ax1.plot(rvalues, lambdas, 'b-', linewidth = 3, label = 'Lyapunov exponent')
ax1.grid('on')
ax1.set_xlabel('r')
ax1.legend(loc='best')
ax1.set_title('Map of x(t+1) = x(t) + r - x(t)^2 versus Lyapunov exponent')


